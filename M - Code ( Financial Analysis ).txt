API
( FOR FINANCAL UNDERSTANDING )
Query – 1 
M – CODE

let
    // ========================================
    // Step 1: Define list of pharma stock symbols
    // ========================================
    symbols = {
        "SUNPHARMA.NS","DRREDDY.NS","CIPLA.NS","DIVISLAB.NS",
        "APOLLOHOSP.NS","FORTIS.NS","LUPIN.NS","CADILAHC.NS",
        "ALKEM.NS","GLENMARK.NS"
    },

    // ========================================
    // Step 2: Function to fetch 3 years stock data (daily)
    // ========================================
    GetStockData = (sym as text) =>
        let
            url = "https://query1.finance.yahoo.com/v8/finance/chart/" & sym & "?interval=1d&range=3y",
            Source = try Json.Document(Web.Contents(url)) otherwise null,
            Chart = if Source <> null and Record.HasFields(Source, "chart") then Source[chart] else null,
            Result = if Chart <> null and List.Count(Chart[result]) > 0 then Chart[result]{0} else null,
            Timestamps = if Result <> null and Record.HasFields(Result, "timestamp") then Result[timestamp] else {},
            Indicators = if Result <> null and Record.HasFields(Result, "indicators") then Result[indicators] else null,
            Quote = if Indicators <> null and Record.HasFields(Indicators, "quote") then Indicators[quote]{0} else null,
            AdjClose = if Indicators <> null and Record.HasFields(Indicators, "adjclose") then Indicators[adjclose]{0} else null,
            Datetime = List.Transform(Timestamps, each #datetime(1970,1,1,0,0,0) + #duration(0,0,0,_)),

            TableData = if Quote <> null and List.Count(Datetime) = List.Count(Quote[close]) then
                            Table.FromColumns({
                                Datetime,
                                Quote[open],
                                Quote[high],
                                Quote[low],
                                Quote[close],
                                Quote[volume],
                                if AdjClose <> null then AdjClose[adjclose] else List.Repeat({null}, List.Count(Datetime))
                            }, {"datetime","open","high","low","close","volume","adjclose"})
                        else
                            #table({"datetime","open","high","low","close","volume","adjclose"}, {}),

            AddSymbol = Table.AddColumn(TableData, "symbol", each sym),
            AddChange = Table.AddColumn(AddSymbol, "%Change", each if [open] <> null and [open] <> 0 then ([close]-[open])/[open] else null),
            AddYear = Table.AddColumn(AddChange, "Year", each Date.Year([datetime])),
            AddMonth = Table.AddColumn(AddYear, "Month", each Date.Month([datetime]))
        in
            AddMonth,

    // ========================================
    // Step 3: Combine stock data for all symbols
    // ========================================
    tables = List.Transform(symbols, each GetStockData(_)),
    StockData = Table.Combine(tables),

    // ========================================
    // Step 4: Static Financials (Income, Balance Sheet, Cash Flow)
    // ========================================
    Financials = #table(
        {"symbol","Revenue","Expenses","NetProfit","Assets","Liabilities","Equity","OperatingCF","InvestingCF","FinancingCF"},
        {
            {"SUNPHARMA.NS", 32000, 25000, 7000, 60000, 25000, 35000, 8000, -3000, 2000},
            {"DRREDDY.NS",   22000, 17000, 5000, 50000, 20000, 30000, 6000, -2000, 1500},
            {"CIPLA.NS",     28000, 22000, 6000, 55000, 23000, 32000, 7000, -2500, 1800},
            {"DIVISLAB.NS",  18000, 14000, 4000, 40000, 15000, 25000, 5000, -1800, 1200},
            {"APOLLOHOSP.NS",40000, 36000, 4000, 70000, 30000, 40000, 9000, -4000, 2500},
            {"FORTIS.NS",    25000, 21000, 4000, 45000, 20000, 25000, 5500, -1700, 1300},
            {"LUPIN.NS",     21000, 16500, 4500, 47000, 19000, 28000, 5800, -1900, 1400},
            {"CADILAHC.NS",  17000, 13500, 3500, 38000, 14000, 24000, 4800, -1600, 1000},
            {"ALKEM.NS",     16000, 12500, 3500, 36000, 13000, 23000, 4500, -1500, 900},
            {"GLENMARK.NS",  15000, 11800, 3200, 34000, 12000, 22000, 4200, -1400, 800}
        }
    ),

    // ========================================
    // Step 5: Healthcare-Specific Segments
    // ========================================
    RDSegment = #table(
        {"symbol","R&D_Spending","PharmaRevenue","GenericRevenue","VaccineRevenue"},
        {
            {"SUNPHARMA.NS",   2500,  32000, 15000, 0},
            {"DRREDDY.NS",     1800,  22000, 12000, 0},
            {"CIPLA.NS",       1200,  28000,  9000, 0},
            {"DIVISLAB.NS",    1400,  18000, 11000, 0},
            {"APOLLOHOSP.NS",  1000,  40000,     0, 0},
            {"FORTIS.NS",       700,  25000,     0, 0},
            {"LUPIN.NS",       1300,  21000,  8000, 0},
            {"CADILAHC.NS",    1100,  17000,  7000, 3000},
            {"ALKEM.NS",        900,  16000,  6000, 0},
            {"GLENMARK.NS",     800,  15000,  5000, 0}
        }
    ),

    // ========================================
    // Step 6: Merge all datasets
    // ========================================
    Merge1 = Table.NestedJoin(StockData, {"symbol"}, Financials, {"symbol"}, "Fin", JoinKind.LeftOuter),
    Expand1 = Table.ExpandTableColumn(Merge1, "Fin", {"Revenue","Expenses","NetProfit","Assets","Liabilities","Equity","OperatingCF","InvestingCF","FinancingCF"}),
    Merge2 = Table.NestedJoin(Expand1, {"symbol"}, RDSegment, {"symbol"}, "RDS", JoinKind.LeftOuter),
    Expanded = Table.ExpandTableColumn(Merge2, "RDS", {"R&D_Spending","PharmaRevenue","GenericRevenue","VaccineRevenue"}),

    // ========================================
    // Step 7: Add Financial Ratios
    // ========================================
    StepROI = Table.AddColumn(Expanded, "ROI", each if [Revenue] <> null and [Revenue] <> 0 then [NetProfit]/[Revenue] else null),
    StepROE = Table.AddColumn(StepROI, "ROE", each if [Equity] <> null and [Equity] <> 0 then [NetProfit]/[Equity] else null),
    StepCurrentRatio = Table.AddColumn(StepROE, "CurrentRatio", each if [Liabilities] <> null and [Liabilities] <> 0 then [Assets]/[Liabilities] else null),
    StepDebtEquity = Table.AddColumn(StepCurrentRatio, "DebtEquity", each if [Equity] <> null and [Equity] <> 0 then [Liabilities]/[Equity] else null),
    StepRDIntensity = Table.AddColumn(StepDebtEquity, "R&D_Intensity", each if [Revenue] <> null and [Revenue] <> 0 then [#"R&D_Spending"]/[Revenue] else null),

    // ========================================
    // Step 8: Prepare Fields for Advanced Visuals
    // ========================================
    StepProfitMargin = Table.AddColumn(StepRDIntensity, "NetProfitMargin", each if [Revenue] <> null and [Revenue] <> 0 then [NetProfit]/[Revenue] else null),
    StepLeverageCategory = Table.AddColumn(StepProfitMargin, "LeverageCategory", each if [DebtEquity] <> null and [DebtEquity] > 1 then "High Leverage" else "Low Leverage"),
    StepLiquidityCategory = Table.AddColumn(StepLeverageCategory, "LiquidityCategory", each if [CurrentRatio] <> null and [CurrentRatio] < 1.5 then "Weak Liquidity" else "Healthy Liquidity")
in
    StepLiquidityCategory

